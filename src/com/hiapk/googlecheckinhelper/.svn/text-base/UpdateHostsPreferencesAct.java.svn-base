package com.hiapk.googlecheckinhelper;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.CheckBoxPreference;
import android.preference.ListPreference;
import android.preference.Preference;
import android.preference.PreferenceActivity;
import android.preference.Preference.OnPreferenceChangeListener;

import com.hiapk.googlecheckinhelper.util.HelperUtils;
import com.hiapk.googlecheckinhelper.util.Log;

/**
 * @author HiApk 主程序入口， 设置自动更新（更新周期）， 手动更新。
 */
public class UpdateHostsPreferencesAct extends PreferenceActivity implements
		OnPreferenceChangeListener {

	private static final String LOGTAG = "UpdateHostsPreferencesAct";
	private ListPreference mLpSetCheckInterval;
	private CheckBoxPreference mCbEnableAtuoCheck;
//	private Preference mPCheckNow;
	private SharedPreferences mSharedPreferences;
	private long mTriggerTime = 0L;
//	private static final String mAppFirstRunSpKeyName = "APP_FIRST_RUN";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		Log.v(LOGTAG, "onCreate");
		mSharedPreferences = getSharedPreferences(
				getString(R.string.app_sharepreference_name),
				Context.MODE_WORLD_READABLE);
		
		addPreferencesFromResource(R.xml.updatehostspreferencesact);

		mCbEnableAtuoCheck = (CheckBoxPreference) findPreference(getString(R.string.key_cbp_auto_check));
		mCbEnableAtuoCheck.setOnPreferenceChangeListener(this);

//		mPCheckNow = (Preference) findPreference(getString(R.string.key_p_checknow));
//		mPCheckNow.setOnPreferenceClickListener(this);

		mLpSetCheckInterval = (ListPreference) findPreference(getString(R.string.key_lp_choseinterval));
		mLpSetCheckInterval.setOnPreferenceChangeListener(this);

//		if (mSharedPreferences.getBoolean(mAppFirstRunSpKeyName, true)) {
//			Log.v(LOGTAG, "app first run. set the default alarm");
//			String defaultVal = getResources().getStringArray(
//					R.array.entriesVal_alarm_interval)[1];
//
//			mLpSetCheckInterval.setSummary(getStringByValue(defaultVal));
//
//			mTriggerTime = getToday();
//			mTriggerTime += Long.valueOf(mLpSetCheckInterval.getValue());
//			setCheckAlarm(this, true, mTriggerTime, Long.valueOf(defaultVal));
//			mSharedPreferences.edit().putLong(
//					getString(R.string.triggerTime_sharepreference_name),
//					mTriggerTime).commit();
//			mSharedPreferences.edit().putBoolean(mAppFirstRunSpKeyName, false)
//					.commit();
//		} else {
			mLpSetCheckInterval.setSummary(getStringByValue(mLpSetCheckInterval
					.getValue()));
//		}
	}

	@Override
	public boolean onPreferenceChange(Preference preference, Object newValue) {
		Log.v(LOGTAG, "onPreferenceChange ");

		if (preference.getKey().equals(getString(R.string.key_cbp_auto_check))) {
			Log.v(LOGTAG, "cbp newVal:" + newValue.toString() + " "
					+ mLpSetCheckInterval.getValue());
			if (Boolean.valueOf(newValue.toString())) {
				long triggerT = HelperUtils.getToday()
						+ Long.valueOf(mLpSetCheckInterval.getValue());
				HelperUtils.setCheckAlarm(this, true, triggerT, Long
						.valueOf(mLpSetCheckInterval.getValue()));
				mSharedPreferences.edit().putLong(
						getString(R.string.triggerTime_sharepreference_name),
						triggerT).commit();
				mSharedPreferences.edit().putBoolean(
						getString(R.string.key_cbp_auto_check), true).commit();
			} else {
				HelperUtils.setCheckAlarm(this, false, mTriggerTime, 0L);
				mSharedPreferences.edit().putBoolean(
						getString(R.string.key_cbp_auto_check), false).commit();
			}
		} else if (preference.getKey().equals(
				getString(R.string.key_lp_choseinterval))) {
			Log.v(LOGTAG, "lp newVal:" + newValue.toString());
			long triggerT = HelperUtils.getToday() + Long.valueOf(newValue.toString());
			HelperUtils.setCheckAlarm(this, true, triggerT, Long.valueOf(newValue
					.toString()));
			preference.setSummary(getStringByValue(newValue.toString()));
			mSharedPreferences.edit().putLong(
					getString(R.string.triggerTime_sharepreference_name),
					triggerT).commit();
			mSharedPreferences.edit().putLong(
					getString(R.string.key_lp_choseinterval),
					Long.valueOf(newValue.toString())).commit();
		}
		return true;
	}

	private CharSequence getStringByValue(String value) {
		CharSequence[] values = mLpSetCheckInterval.getEntryValues();
		CharSequence[] entries = mLpSetCheckInterval.getEntries();
		for (int i = 0; i < values.length; ++i) {
			if (values[i].equals(value))
				return entries[i];
		}
		return getString(R.string.lp_no_selected);
	}
}
