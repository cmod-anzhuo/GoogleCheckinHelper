package com.hiapk.googlecheckinhelper;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Color;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.hiapk.googlecheckinhelper.util.HelperUtils;
import com.hiapk.googlecheckinhelper.util.Log;

public class HelpMeActivity extends Activity implements OnClickListener {

	private static final String LOGTAG = "HelpMeActivity";
	private static final int MENU_ABOUT = 1;
	private static final int MENU_SETTINGS = 2;
	public static boolean mEnforceNotification = false;
	private Button btnCheckNow;
	private Button btnRollBack;
	private static final String mAppFirstRunSpKeyName = "APP_FIRST_RUN";
	private SharedPreferences mSharedPreferences;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mSharedPreferences = getSharedPreferences(
				getString(R.string.app_sharepreference_name),
				Context.MODE_WORLD_READABLE);
		
		if (HelperUtils.checkHardware(this)) {
			Log.v(LOGTAG, "not hiapk 3.0 or newer rom");
			mSharedPreferences.edit().putBoolean(
					getString(R.string.hiapkrom_sharepreference_name), false).commit();
			LinearLayout layout = new LinearLayout(this);
			layout.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT,
					LayoutParams.FILL_PARENT));
			ListView lv = new ListView(this);
			lv.setId(android.R.id.list);
			lv.setVisibility(View.GONE);
			layout.addView(lv);
			TextView tv = new TextView(this);
			tv.setTextColor(Color.RED);
			tv.setTextSize(30f);
			tv.setGravity(Gravity.CENTER);
			tv.setText(R.string.not_defined_hiap_rom);
			layout.setGravity(Gravity.CENTER);
			layout.addView(tv);
			setContentView(layout);
			return;
		}
		
		mSharedPreferences.edit().putBoolean(
				getString(R.string.hiapkrom_sharepreference_name), true).commit();
		if (mSharedPreferences.getBoolean(mAppFirstRunSpKeyName, true)) {
			Log.v(LOGTAG, "app first run. set the default alarm");
			String defaultVal = getResources().getStringArray(
					R.array.entriesVal_alarm_interval)[1];

			long aTriggerTime = HelperUtils.getToday();
			aTriggerTime += Long.valueOf(getString(R.string.alarm_interval_default));
			HelperUtils.setCheckAlarm(this, true, aTriggerTime, Long.valueOf(defaultVal));
			mSharedPreferences.edit().putLong(
					getString(R.string.triggerTime_sharepreference_name),
					aTriggerTime).commit();
			mSharedPreferences.edit().putBoolean(mAppFirstRunSpKeyName, false)
					.commit();
		}
		setContentView(R.layout.helpmeactivity);
		btnCheckNow = (Button)findViewById(R.id.Button01);
		btnCheckNow.setOnClickListener(this);
		btnRollBack = (Button)findViewById(R.id.btnRollBack);
		btnRollBack.setOnClickListener(this);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(0, MENU_ABOUT, Menu.FIRST + 1, getString(R.string.menu_about)).setIcon(
				android.R.drawable.ic_menu_info_details);
		
		menu.add(0, MENU_SETTINGS, Menu.FIRST, getString(R.string.help_settings)).setIcon(
				android.R.drawable.ic_menu_preferences);
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case MENU_ABOUT:
			showAbout();
			break;
		case MENU_SETTINGS:
			Intent intent = new Intent(this, UpdateHostsPreferencesAct.class);
			startActivity(intent);
			break;
		default:
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	public void showAbout() {
		View about = android.view.LayoutInflater.from(this).inflate(
				R.layout.hiapk_about, null);
		String version = "1.0"; //use versionName in manifest by default
		PackageManager pm = this.getPackageManager();
		try {
			version = pm.getPackageInfo(getPackageName(), 0).versionName;
		} catch (NameNotFoundException e) {
		}
		((TextView) about.findViewById(R.id.about)).setText(String.format(
				getString(R.string.about_content), version));
		new AlertDialog.Builder(this).setTitle(getString(R.string.about_title))
				.setView(about).setPositiveButton(
						getString(android.R.string.ok), null).create().show();
	}

	@Override
	public void onClick(View v) {
		if(v.getId() == R.id.Button01) {
			Toast.makeText(this, R.string.hint_check_now, Toast.LENGTH_LONG).show();
			mEnforceNotification = true;
			Intent intent = new Intent(CheckHostsReceiver.CHECK_ACTION_NAME);
			sendBroadcast(intent);
		} else if (v.getId() == R.id.btnRollBack) {
			rollBackHosts();
		}
	}

	private void rollBackHosts() {
		Log.v(LOGTAG, "start rollback");
		String lastUpdate = mSharedPreferences.getString("HOST_LAST_UPDATE", "");
		Log.v(LOGTAG, "lastUpdate:" + lastUpdate);
		if(TextUtils.isEmpty(lastUpdate)) {
			CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_not_need);
			return;
		}
		try {
			if (HelperUtils.rootCMD(getString(R.string.cmd_remount_system)) != 0) {
				Log.e(LOGTAG, "remount system failer");
				CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_fail);
				return;
			}
			String tmpFileName = CheckHostsReceiver.HostsPath + ".tmp";
			if (HelperUtils.rootCMD("echo '' > " + tmpFileName) != 0) {
				Log.e(LOGTAG, "rollback create tmp file failed");
				CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_fail);
				return;
			}
			File mHostFile = new File(CheckHostsReceiver.HostsPath);
			File tmpFile = new File(tmpFileName);
			if (!tmpFile.exists()) {
				Log.e(LOGTAG, "rollback temp file not exists");
				CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_fail);
				return;
			}
			BufferedInputStream bis = new BufferedInputStream(
					new FileInputStream(mHostFile));
			FileOutputStream fos = new FileOutputStream(tmpFile);
			byte[] buff = new byte[(int) mHostFile.length()];
			bis.read(buff);
			String[] origFileCont = new String(buff).split("\n");
			boolean notNeed = true;
			for (String line : origFileCont) {
				Log.v(LOGTAG, "read line: " + line);
				if (TextUtils.isEmpty(line) || line.trim().startsWith("#"))
					continue;
				String[] aPair = line.split("\\s+");
				if (!lastUpdate.contains(aPair[1])) {
					fos.write((line + "\n").getBytes());
				} else {
					notNeed = false;
				}
			}
			fos.flush();
			fos.close();
			bis.close();
			if (HelperUtils.rootCMD("mv " + tmpFileName + " " + CheckHostsReceiver.HostsPath) != 0 && !notNeed) {
				Log.e(LOGTAG, "rollback rename failed");
				CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_fail);
				return;
			}
			if(notNeed) 
				CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_not_need);
			else 
				CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_success);
			Log.v(LOGTAG, "rollback finished");
		} catch (Exception e) {
			Log.e(LOGTAG, "error:" + e.getLocalizedMessage());
			CheckHostsReceiver.notifyUpdateFinished(this, R.string.rollback_fail);
		}
	}
}
